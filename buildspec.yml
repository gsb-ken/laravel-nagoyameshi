version: 0.2

phases:
  pre_build:
    commands:
      - echo "AWS_REGION=${AWS_REGION}"
      - echo "AWS_ACCOUNT_ID=${AWS_ACCOUNT_ID}"
      - echo "PROJECT=${PROJECT}"
      - echo "ENVIRONMENT=${ENVIRONMENT}"
      - echo "[PRE_BUILD] Logging in to Amazon ECR..."
      - aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com

  build:
    commands:
      - echo "[BUILD] Building Laravel Docker image..."
      - docker build --no-cache -f Dockerfile.deployment -t ${CONTAINER_NAME} .
      - docker tag ${CONTAINER_NAME} ${REPOSITORY_URI}:latest

  post_build:
    commands:
      - echo "[POST_BUILD] Pushing image to ECR..."
      - docker push ${REPOSITORY_URI}:latest

      - echo "MIGRATION_TASK_DEFINITION=${MIGRATION_TASK_DEFINITION}"
      - echo "ECS_CLUSTER_NAME=${ECS_CLUSTER_NAME}"
      - echo "SUBNET_ID_1=${SUBNET_ID_1}"
      - echo "SUBNET_ID_2=${SUBNET_ID_2}"
      - echo "SECURITY_GROUP_ID=${SECURITY_GROUP_ID}"

      - echo "[POST_BUILD] Running Laravel migration with ${MIGRATION_TASK_DEFINITION}"
      - |
        TASK_ARN=$(aws ecs run-task \
          --cluster ${ECS_CLUSTER_NAME} \
          --launch-type FARGATE \
          --task-definition ${MIGRATION_TASK_DEFINITION} \
          --network-configuration "awsvpcConfiguration={subnets=[${SUBNET_ID_1},${SUBNET_ID_2}],securityGroups=[${SECURITY_GROUP_ID}],assignPublicIp=DISABLED}" \
          --region ap-northeast-1 \
          --output json \
          | tee /tmp/run-task.json \
          | jq -r '.tasks[0].taskArn // empty')

        echo "[DEBUG] TASK_ARN=${TASK_ARN}"
        if [ -z "$TASK_ARN" ] || [ "$TASK_ARN" = "null" ]; then
          echo "[ERROR] Failed to start migration task. TASK_ARN is empty."
          exit 1
        fi

        echo "[INFO] Migration task started: $TASK_ARN"

        # タスク終了まで待機
        aws ecs wait tasks-stopped \
          --cluster ${ECS_CLUSTER_NAME} \
          --tasks $TASK_ARN \
          --region ap-northeast-1

        # logStreamName をタスクから直接取得
        LOG_STREAM=$(aws ecs describe-tasks \
          --cluster ${ECS_CLUSTER_NAME} \
          --tasks $TASK_ARN \
          --region ap-northeast-1 \
          --query "tasks[0].containers[0].logStreamName" \
          --output text)

        if [ -z "$LOG_STREAM" ] || [ "$LOG_STREAM" = "None" ]; then
          echo "[WARN] No log stream found for migration task."
          exit 1
        fi

        echo "[INFO] Found log stream: $LOG_STREAM"
        
        # CloudWatch Logs 取得
        aws logs get-log-events \
          --log-group-name "/ecs/${PROJECT}-${ENVIRONMENT}/task/migrate" \
          --log-stream-name "$LOG_STREAM" \
          --region ap-northeast-1 \
          --query "events[*].message" \
          --output text


      - echo "[POST_BUILD] Writing imagedefinitions.json for ECS Deploy..."
      - printf '[{"name":"%s","imageUri":"%s:latest"}]' "$CONTAINER_NAME" "$REPOSITORY_URI" > imagedefinitions.json
      - ls -l imagedefinitions.json
      - cat imagedefinitions.json

artifacts:
  files:
    - imagedefinitions.json